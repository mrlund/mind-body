/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
/* tslint:disable */

import '@stencil/core';


import {
  Observable,
} from 'rxjs/';


declare global {
  interface HTMLElement {
    componentOnReady?: () => Promise<this | null>;
  }

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}

  namespace StencilComponents {

    interface GiAnimationProgressBar {

    }

    interface GiAnimation {
      'animation': string;
      'canvasPauseAnimation': () => void;
      'canvasPlayAnimation': () => void;
      'chapter': string;
      'imgext': string;
      'isClassroomModeOn': boolean;
      'project': string;
      'session': string;
    }

    interface GiComponentDataWrapper {
      'propNames': string;
      'propValues': string;
    }

    interface GiDataProvider {
      'baseServerUrl': string;
      'getData': (key: string) => Observable<any>;
      'pageContentUrl': string;
      'saveData': (data: any) => Observable<any>;
    }

    interface GiRoadmap {

    }

    interface GiSimpleData {
      'value': string;
    }
  }


    interface HTMLGiAnimationProgressBarElement extends StencilComponents.GiAnimationProgressBar, HTMLStencilElement {}

    var HTMLGiAnimationProgressBarElement: {
      prototype: HTMLGiAnimationProgressBarElement;
      new (): HTMLGiAnimationProgressBarElement;
    };
    

    interface HTMLGiAnimationElement extends StencilComponents.GiAnimation, HTMLStencilElement {}

    var HTMLGiAnimationElement: {
      prototype: HTMLGiAnimationElement;
      new (): HTMLGiAnimationElement;
    };
    

    interface HTMLGiComponentDataWrapperElement extends StencilComponents.GiComponentDataWrapper, HTMLStencilElement {}

    var HTMLGiComponentDataWrapperElement: {
      prototype: HTMLGiComponentDataWrapperElement;
      new (): HTMLGiComponentDataWrapperElement;
    };
    

    interface HTMLGiDataProviderElement extends StencilComponents.GiDataProvider, HTMLStencilElement {}

    var HTMLGiDataProviderElement: {
      prototype: HTMLGiDataProviderElement;
      new (): HTMLGiDataProviderElement;
    };
    

    interface HTMLGiRoadmapElement extends StencilComponents.GiRoadmap, HTMLStencilElement {}

    var HTMLGiRoadmapElement: {
      prototype: HTMLGiRoadmapElement;
      new (): HTMLGiRoadmapElement;
    };
    

    interface HTMLGiSimpleDataElement extends StencilComponents.GiSimpleData, HTMLStencilElement {}

    var HTMLGiSimpleDataElement: {
      prototype: HTMLGiSimpleDataElement;
      new (): HTMLGiSimpleDataElement;
    };
    

  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {
    'gi-animation-progress-bar': JSXElements.GiAnimationProgressBarAttributes;
    'gi-animation': JSXElements.GiAnimationAttributes;
    'gi-component-data-wrapper': JSXElements.GiComponentDataWrapperAttributes;
    'gi-data-provider': JSXElements.GiDataProviderAttributes;
    'gi-roadmap': JSXElements.GiRoadmapAttributes;
    'gi-simple-data': JSXElements.GiSimpleDataAttributes;
    }
  }

  namespace JSXElements {

    export interface GiAnimationProgressBarAttributes extends HTMLAttributes {

    }

    export interface GiAnimationAttributes extends HTMLAttributes {
      'animation'?: string;
      'chapter'?: string;
      'imgext'?: string;
      'isClassroomModeOn'?: boolean;
      'project'?: string;
      'session'?: string;
    }

    export interface GiComponentDataWrapperAttributes extends HTMLAttributes {
      'propNames'?: string;
      'propValues'?: string;
    }

    export interface GiDataProviderAttributes extends HTMLAttributes {
      'baseServerUrl'?: string;
      'pageContentUrl'?: string;
    }

    export interface GiRoadmapAttributes extends HTMLAttributes {

    }

    export interface GiSimpleDataAttributes extends HTMLAttributes {
      'value'?: string;
    }
  }

  interface HTMLElementTagNameMap {
    'gi-animation-progress-bar': HTMLGiAnimationProgressBarElement
    'gi-animation': HTMLGiAnimationElement
    'gi-component-data-wrapper': HTMLGiComponentDataWrapperElement
    'gi-data-provider': HTMLGiDataProviderElement
    'gi-roadmap': HTMLGiRoadmapElement
    'gi-simple-data': HTMLGiSimpleDataElement
  }

  interface ElementTagNameMap {
    'gi-animation-progress-bar': HTMLGiAnimationProgressBarElement;
    'gi-animation': HTMLGiAnimationElement;
    'gi-component-data-wrapper': HTMLGiComponentDataWrapperElement;
    'gi-data-provider': HTMLGiDataProviderElement;
    'gi-roadmap': HTMLGiRoadmapElement;
    'gi-simple-data': HTMLGiSimpleDataElement;
  }
}
declare global { namespace JSX { interface StencilJSX {} } }

export declare function defineCustomElements(window: any): void;