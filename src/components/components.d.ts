/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */

import '@stencil/core';

declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLElement {
    componentOnReady?: () => Promise<this | null>;
  }

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}

import {
  Observable,
} from 'rxjs/';

declare global {

  namespace StencilComponents {
    interface GiComponentDataWrapper {
      'propNames': string;
      'propValues': string;
    }
  }

  interface HTMLGiComponentDataWrapperElement extends StencilComponents.GiComponentDataWrapper, HTMLStencilElement {}

  var HTMLGiComponentDataWrapperElement: {
    prototype: HTMLGiComponentDataWrapperElement;
    new (): HTMLGiComponentDataWrapperElement;
  };
  interface HTMLElementTagNameMap {
    'gi-component-data-wrapper': HTMLGiComponentDataWrapperElement;
  }
  interface ElementTagNameMap {
    'gi-component-data-wrapper': HTMLGiComponentDataWrapperElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'gi-component-data-wrapper': JSXElements.GiComponentDataWrapperAttributes;
    }
  }
  namespace JSXElements {
    export interface GiComponentDataWrapperAttributes extends HTMLAttributes {
      'propNames'?: string;
      'propValues'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface GiDataProvider {
      'getData': (key: string) => Observable<any>;
      'pageContentUrl': string;
    }
  }

  interface HTMLGiDataProviderElement extends StencilComponents.GiDataProvider, HTMLStencilElement {}

  var HTMLGiDataProviderElement: {
    prototype: HTMLGiDataProviderElement;
    new (): HTMLGiDataProviderElement;
  };
  interface HTMLElementTagNameMap {
    'gi-data-provider': HTMLGiDataProviderElement;
  }
  interface ElementTagNameMap {
    'gi-data-provider': HTMLGiDataProviderElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'gi-data-provider': JSXElements.GiDataProviderAttributes;
    }
  }
  namespace JSXElements {
    export interface GiDataProviderAttributes extends HTMLAttributes {
      'pageContentUrl'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface GiSimpleData {
      'value': string;
    }
  }

  interface HTMLGiSimpleDataElement extends StencilComponents.GiSimpleData, HTMLStencilElement {}

  var HTMLGiSimpleDataElement: {
    prototype: HTMLGiSimpleDataElement;
    new (): HTMLGiSimpleDataElement;
  };
  interface HTMLElementTagNameMap {
    'gi-simple-data': HTMLGiSimpleDataElement;
  }
  interface ElementTagNameMap {
    'gi-simple-data': HTMLGiSimpleDataElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'gi-simple-data': JSXElements.GiSimpleDataAttributes;
    }
  }
  namespace JSXElements {
    export interface GiSimpleDataAttributes extends HTMLAttributes {
      'value'?: string;
    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }

export declare function defineCustomElements(window: any): void;