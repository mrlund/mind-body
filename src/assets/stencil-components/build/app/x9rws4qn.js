/*! Built with http://stenciljs.com */
const{h:e}=window.App;class t{componentDidLoad(){this.addIntersectionObserver()}componentWillUpdate(){this.src!==this.oldSrc&&this.addIntersectionObserver(),this.oldSrc=this.src}handleImage(){const e=this.el.querySelector("img");e.setAttribute("src",e.getAttribute("data-src")),e.onload=(()=>{e.removeAttribute("data-src"),this.lazyImgloaded.emit(e)})}addIntersectionObserver(){this.src&&("IntersectionObserver"in window?(this.io=new IntersectionObserver(e=>{e[0].isIntersecting&&(this.handleImage(),this.removeIntersectionObserver())}),this.io.observe(this.el.querySelector("img"))):this.handleImage())}removeIntersectionObserver(){this.io&&(this.io.disconnect(),this.io=null)}render(){return e("img",{"data-src":this.src,alt:this.alt})}static get is(){return"lazy-img"}static get properties(){return{alt:{type:String,attr:"alt"},el:{elementRef:!0},oldSrc:{state:!0},src:{type:String,attr:"src"}}}static get events(){return[{name:"lazyImgloaded",method:"lazyImgloaded",bubbles:!0,cancelable:!0,composed:!0}]}static get style(){return":host{display:block}img{max-width:100%}"}}export{t as LazyImg};